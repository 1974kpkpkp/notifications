<specification 
              xmlns='http://berjon.com/ns/re-spec/' 
              xmlns:rs='http://berjon.com/ns/re-spec/' 
              version='1.0' 
              xml:lang='en'>

  <metadata>
    <title>Web Notifications</title>
    <styling type='W3C' status='ED'/>
    <date year='2012' month='05' day='08'/>
    <editors>
      <person>
        <name>John Gregg</name>
        <email>johnnyg@google.com</email>
        <company>Google</company>
        <company-url>http://www.google.com/</company-url>
      </person>
    </editors>
  </metadata>

  <section xml:id='abstract' type='w3c-abstract'>
    <title>Abstract</title>
    <p>
      This document defines an API for displaying simple notifications to the user.
    </p>
    <!--
    <ednote>
      <p>
        Last update: $Id: Notifications.xml,v 1.7 2012/05/09 05:52:30 jgregg Exp $.
      </p>
    </ednote>
    -->
  </section>

  <section xml:id='sotd' type='w3c-sotd'>
    <title>Status of this Document</title>
    <p>
      This document is an Editor's Draft and is not suitable for purposes other
      than reviewing the specification being developed.
    </p>
  </section>

  <section xml:id='contents' type='toc'>
    <title>Table of Contents</title>

    <?respec-toc?>
  </section>

  <section xml:id='definitions'>
    <title>Definitions</title>

    <ul>
      <li><em>ambient notification</em>: A notification which appears and disappears automatically without user action.</li>
      <li><em>interactive notification</em>: A notification which can receive events from user actions and deliver them to the application which created the notification.</li>
      <li><em>persistent notification</em>: A notification which is displayed until the user explicitly dismisses it.</li>
      <li><em>notification platform</em>: A notification platform is a system outside the user agent which provides desktop notifications.  Examples include Growl on MacOS, NotifyOSD on Linux, and the Windows notification API.</li>
      <li><em>simple notification</em>: A notification which consists only of an icon and one or two lines of text.</li>
      <li><em>web notification</em>: A notification which consists of Web platform content, such as HTML or SVG.</li>
    </ul>
  </section>

  <section xml:id='requirements'>
    <title>Requirements and use cases</title>  
    This specification must meet the following requirements:
    <ul>
      <li>An implementation which uses only the existing notification platforms in major platforms to display notifications must be able to comply with the specification.</li>
      <li>The specification must allow compliant implementations regardless of platform or device.</li>
      <li>The specification must provide controls to users in order to prevent unwanted notifications to be displayed.</li>
      <li>The specification must define an event model for interactive notifications.</li>
      <li>The specification must address security issues.</li>
      <li>The specification should not require any implementation to display persistent notifications.</li>
      <li>The specification should be compatible with other Web technologies, such as HTML and SVG.</li>
    </ul>

    The specification attempts to address the following use cases:
    <ul>
      <li>An application alerts the user "you've got mail" in the form of an ambient notification, with no interaction necessary.</li>
      <li>An application alerts the user "you've got mail" as an interactive notification which allows the user to easily return to the inbox.</li>
      <li>A calendar application alerts the user for an upcoming meeting, and allows the user to easily specify a "snooze" delay of several possible time periods.</li>
      <li>A system alerts the user "your printer is out of paper".</li>
      <li>An application with multiple simultaneous execution contexts (like a multi-tab email application) wants to show notifications without creating duplicate notifications.</li>
    </ul>
  </section>
  
  <section xml:id='introduction' normativity='not normative'>
    <title>Introduction</title>
    <p>
      This specification provides an API to generate <em>simple notifications</em> to
      alert users outside of the web page.  It does not specify exactly how a user
      agent should display these notifications; the best presentation depends on the device
      where the user agent is run.  When this specificiation refers to displaying
      notifications on the "desktop", it generally refers to some static display
      area outside the web page, but may take several forms, including:
      <ul>
        <li>a corner of the user's display,</li>
        <li>an area within the chrome of the user agent,</li>
        <li>the "home" screen of a mobile device,</li>
        <li><em>et al.</em></li>
      </ul>
      This specification does not define exactly how the user agent should display
      the notification, and the API is designed to be flexible with respect to
      presentation options.
    </p>
    <p>
      This specification is designed to be compatible with existing notification platforms
      as much as possible, but also to be platform-independent.  Since the common platforms
      do not provide the same functionality, this spec will indicate what events are guaranteed
      and which are not.  In particular, notifications as specified here only can contain
      text and icon content.  In the future, notifications generated from Web content may
      wish to contain Web content themselves, but that is outside the scope of this document.
    </p>    
    <p>
      In general, the event model for notifications is best-effort; while the Notification 
      object offers an "onclick" event, applications may enhance their functionality by
      listening for that event, but <em>must not depend on receiving it</em>,
      in case the underlying notification platform does not provide that capability.
    </p>
   
    <section>
      <title>Security</title>
      <p>
	Notifications should only be presented when the user has indicated they are desired;
	without this they could create a negative experience for the user.
      </p>     
      </section>
  </section>

  <section xml:id='permissions'>
    <title>Permissions</title>
    <p>
      Permission must be granted by the user before the user agent
      is allowed to show notifications.  Permissions are granted separately for
      each security origin, as defined in [ORIGIN].
    </p>

    <p>
      The <em>current notification permission level</em> is one of the string values
      <code>'ALLOWED'</code>, <code>'DENIED'</code>, and <code>'DEFAULT'</code>.
    </p>
  </section>

  <section xml:id='idl-if-Notification'>
    <title>The Notification interface</title>
    <p>
      The Notification interface represents a single notification to be shown to the user. It extends the EventTarget interface defined in [DOMEVENTS].
    </p>
    <schema>
      <title>the Notification interface</title>
      <idl>
        <interface name='Notification' extends='EventTarget'>
	  <method name='close'>
	    <p>
	      Requests the user agent to close this notification. If the notification
	      has already been displayed, the user agent must remove it from the display;
	      otherwise, the user agent must prevent it from being displayed.
	    </p>
	  </method>
	  <attribute type='Function' name='onclick'>
	    <p>
	      An event listener function corresponding to the event type "click".  This event
	      listener is must be invoked when the user clicks on a notification.
	    </p>
	    <p>
	      <em>
		This event is not guaranteed if the underlying notification platform does not support receiving
		click events.
	      </em>
	    </p>
	  </attribute>
	  <attribute type='Function' name='onshow'>
	    <p>
	      An event listener function corresponding to the event type "show".  The show event
	      must fire when the notification actually becomes visible to the user.
	    </p>
	    <p>
	      <em>
		If the underlying notification platform does not show the notification immediately,
		this event may precede the notification becoming visible, and the event represents
		only that the user agent has attempted to show the notification.
	      </em>
	    </p>
	  </attribute>
	  <attribute type='Function' name='onerror'>
	    <p>
	      An event listener function corresponding to the event type "error".  This
	      event fires if the notification cannot be displayed to the user because of an error.
	    </p>
	  </attribute>
	  <attribute type='Function' name='onclose'>
	    <p>
	      An event listener function corresponding to the event type "close".  This
	      event fires after the "show" event, at the point when the notification is 
	      dismissed by the user, closed by script, or closed by the notification
	      platform.
	    </p>
	  </attribute>
	  <attribute name='tag' type='DOMString'>
	    <p>
	      The tag value identifies this notification for possible replacement by another notification
	      serving the same purpose.  The user agent should not allow two notifications created
	      by the same security origin and having the same tag value to be shown simultaneously.
	    </p>

            <p>
	      See below for an example of <a href="#tags-example">using notification tags</a>.
	    </p>
	  </attribute>
	  <attribute type='DOMString' name='dir'>
	    <p>
	      The <code>dir</code> attribute specifies the directionality of the notification.
	    </p>
	  </attribute>
	</interface>
      </idl>
    </schema>
    
    <section>
      <title>Directionality</title>
      <p>
	The <code>dir</code> attribute of the <code>Notification</code> interface specifies
	the directionality of the notification.  It is an enumerated attribute with the following
	keywords:

	<ul>
	  <li>
	    The <code>ltr</code> keyword, which indicates that the contents of the notification
	    are left-to-right text.
	  </li>
	  <li>
	    The <code>rtl</code> keyword, which indicates that the contents of the notification
	    are right-to-left text.
	  </li>
	  <li>
	    The <code>auto</code> keyword, which indicates that the directionality of the notification
	    is to be determined programmatically, as described below.
	  </li>
	</ul>
	  
	If unspecified the attribute has the value <code>auto</code>.
      </p>
      <p>
	If the notification's dir attribute is <code>auto</code>, its title and body must be
	split into paragraphs and the directionality of each paragraph determined from its content
	independently of the others as specified by the Unicode bidirectional algorithm's rule P1,
	P2, and P3. [BIDI]
      </p>
      <p>
	The user agent should reflect the directionality of the notification, for each paragraph
	of the title and body, in the underlying notification platform if that platform supports it.
      </p>
    </section>

    
    <section>
      <title>Event handler attributes</title>
      <p>The following are event handler attributes (and their corresponding event handler event types, as defined by [HTML5]) that must be supported as DOM attributes by the Notification object.</p>
      <table>
	<thead style="border-bottom: medium solid;" >
	  <tr>
	    <th>event handler attribute</th>
	    <th>event handler event type</th>
	  </tr>
	</thead>
	<tr>
	  <td><code>onclick</code></td>
	  <td><code>click</code></td>
	</tr>
	<tr>
	  <td><code>onshow</code></td>
	  <td><code>show</code></td>
	</tr>
	<tr>
	  <td><code>onerror</code></td>
	  <td><code>error</code></td>
	</tr>
	<tr>
	  <td><code>onclose</code></td>
	  <td><code>close</code></td>
	</tr>
      </table>
    </section>
    
    <section>
      <title>Constructors</title>
      <schema>
	<title>Constructing a notification</title>
	<idl>
	  <method name="Notification">
	    <p>
	      Creates a new simple notification object with the provided content, and posts a task for it to be shown.
	    </p>
	    <param name='title' type='DOMString'>
	      Primary text, or title, of the notification.  The user agent must process any markup in this string so that it appears as plain text when used as a string in the underlying notification platform.
	    </param>
	    <param name='options' type='Object'>
	      Optional additional parameters.  This object is a dictionary, which may contain any or all of the following keys. Any additional keys not
	      specified here should be ignored.
	      <blockquote>
		<param name='iconUrl' type='DOMString'>
		  The value contains the URL of the icon to be shown with this notification.
		  The parameter must be resolved relative to the current document base URL or worker script URL.
		</param>
		<param name='body' type='DOMString'>
		    The value contains the secondary text, or body, of the notification.

		  <p>
		    The user agent must process any markup in this string so that it appears as plain text when used as a string in the underlying notification platform.
		  </p>
		</param>
		<param name='tag' type='DOMString'>
		  This value must be assigned to the <code>tag</code> attribute of the new Notification object.
		</param>
		<param name='onshow' type='Function'>
		  This value must be assigned to the <code>onshow</code> attribute of the new Notification object.
		</param>
		<param name='onerror' type='Function'>
		  The value must be assigned to the <code>onerror</code> attribute of the new Notification object.
		</param>
		<param name='onclick' type='Function'>
		  The value must be assigned to the <code>onclick</code> attribute of the new Notification object.
		</param>
		<param name='onclose' type='Function'>
		  The value must be assigned to the <code>onclose</code> attribute of the new Notification object.
		</param>
	      </blockquote>
	    </param>
	    <returns type='Notification'>
	      <p>A new notification object.</p>
	    </returns>
	  </method>
	</idl>
      </schema>
      <p>
	When the <code>Notification()</code> constructor is invoked, the user agent must return a new Notification object.
	The user agent must post a task to show the new notification, as specified in <a href="#showing">Showing a notification</a>.
      </p>
    </section>
  </section>

  <section xml:id='algorithms' normativity='normative'>
    <title>Algorithms</title>  
    <p>
      The user agent must keep a <em>queue of pending notifications</em> and a <em>list of active notifications</em>. 
    </p>

    <section xml:id='showing'>
      <title>Showing a notification</title>
      <p>
	When the user agent shows <em>notification</em>, it must proceed as follows.
      </p>
      
      <p>
	If notification permissions are not allowed, the user agent must fire the <code>error</code>
	event on <em>notification</em> and not proceed further.
      </p>

      <p>
	The user agent then must search for a possible replacement.
	<ol>
	  <li>Get the tag attribute of the notification to be shown, and let it be <em>tag</em>.</li>
	  <li>
	    If <em>tag</em> is defined, examine all the notifications in the <em>list of active notifications</em> and
	    the <em>queue of pending notifications</em>.
	    If any notification is found with the same source origin and has a tag attribute equal to <em>tag</em>, 
	    let it be called <em>existing</em>.
	  </li>
	</ol>
	If <em>existing</em> was found, the user agent must replace <em>existing</em> with <em>notification</em>
	according to the <a href="#replacing">replacing a notification</a> algorithm, and stop.
      </p>						
      
      <p>
	If no replacement candidate was found, and the device allows notifications to be displayed immediately
	without limitations on the number of concurrent notifications, the user agent must
	display the notification immediately using <a href="#displaying">displaying a notification</a>
	algorithm, and stop.
      </p>
      
      <p>
	If the device does have limitations on the number of concurrent notifications,
	the user agent must either immediately call to a notifications platform which 
	natively supports queueing, or add <em>notification</em> to the
	<em>queue of pending notifications</em>, and proceed according to <a href="#queueing">queueing notifications</a>.
      </p>
    </section>

    <section xml:id='closing'>
      <title>Closing a notification</title>
      <p>
	When a notification is closed, either by the underlying notifications platform or by the user,
	the user agent must fire the <code>close</code> event on that notification, and remove it
	from the <em>list of active notifications</em>.
      </p>
    </section>

    <section xml:id='queueing'>
      <title>Queueing notifications</title>
      <p>
	Whenever the <em>queue of pending notifications</em> is not empty, the user agent must wait and 
	monitor changes in the available notification space on the device.
      </p>

      <p>
	When the available display space changes on the device such that a new notification may be
	displayed, for example due to a previous notification being dismissed, the user agent should
	<a href="#displaying">display</a> the first notification in the queue, and remove that notification
	from the queue.
      </p>
    </section>

    <section xml:id='displaying'>
      <title>Displaying notifications</title>
      <p>
	When a user agent is to <em>display a notification</em>, the user agent should perform the following steps:
	<ol>
	  <li>
	    If <code>iconUrl</code> has been supplied, fetch the resource given by <code>iconUrl</code> using the algorithm defined in [HTML5].
	  </li>
	  <li>
	    If the fetch algorithm returns error information, queue a task to fire the <code>error</code> event on the notification
	    object and stop executing this algorithm.
	  </li>
	  <li>Fire the <code>show</code> event on the notification object.</li>
	  <li>Show the notification on the device, such as by calling the appropriate notification platform.</li>
	  <li>Add the new notification to the <em>list of active notifications</em>.</li>
	</ol>
      </p>
    </section>

    <section xml:id='replacing'>
      <title>Replacing a notification</title>
      <p>
	When a user agent is to <em>replace a notification</em>, the user agent should perform the following steps.
	Let <em>old</em> be the notification to be replaced by <em>new</em>.
	<ol>
	  <li>
	    If <em>new</em> has an <code>iconUrl</code> specified, fetch the icon resource in <em>new</em> using the algorithm defined in [HTML5].
	  </li>
	  <li>
	    If the fetch algorithm returns error information, queue a task to fire the <code>error</code> event on the <em>new</em> notification
	    object and stop executing this algorithm, returning the error information.  The <em>old</em> notification is not affected.
	  </li>
	  <li>Fire the <code>close</code> event on the <em>old</em> notification object.</li>
	  <li>If <em>old</em> is in the <em>queue of pending notifications</em>:
	    <ol type="a">
	      <li>Replace <em>old</em> with <em>new</em>, in the same position, in the <em>queue of pending notifications</em>.</li>
	    </ol>
	    otherwise, if <em>old</em> is in the <em>list of active notifications</em>:
	    <ol type="a">
	      <li>Fire the <code>show</code> event on the <em>new</em> notification object.</li>
	      <li>If the underlying notification platform supports replacement, replace <em>old</em> with <em>new</em> using the platform.</li>
	      <li>If the underlying notification platform does not support replacement, remove <em>old</em> using the platform and show <em>new</em> using the platform.</li>
	      <li>Remove <em>old</em> from the <em>list of active notifications</em>.</li>
	      <li>Add <em>new</em> to the <em>list of active notifications</em>.</li>
	    </ol>
	  </li>
	</ol>
      </p>
    </section>
  </section>
  <section xml:id='interactions' normativity='not normative'>
    <title>Examples of interacting with notifications</title>
    <section>
      <title>Using events</title>
      <p>
	Notification objects dispatch events during their lifecycle, which authors can use
	to generate desired behaviors.
      </p>
      <p>
	The <code>show</code> event occurs when the notification is shown to the user -- 
	this may be at some time after the notification is created in the case
	of limited display space and a queue.
      </p>

      <p>
	In the following example, this event is used to guarantee that regardless of when
	the notification is shown, it is displayed for only 15 seconds.
      </p>

      <example>
        new Notification("New Email Received",
                         { iconUrl: "mail.png",
                           onshow: function() { setTimeout(notification.close(), 15000); }
                         });
      </example>

      <p>
	The <code>close</code> events occurs when the notification is dismissed by the user.
	Authors may use this event to perform actions when notifications are acknowledged.
      </p>
      <p>
	In the following example, when a meeting reminder notification is acknowledged, the
	application suppresses other forms of reminders.
      </p>

      <example>
        new Notification("Meeting about to begin",
                         { iconUrl: "calendar.gif",
                           body: "Room 101",
                           onclose: function() { cancelReminders(event); }
                         });
      </example>
    </section>
    
    <section xml:id='tags-example'>
      <title>Using the tag attribute for multiple instances</title>
      <p>
	Web applications frequently operate concurrently in multiple instances, such as when a
	user opens a mail application in multiple browser tabs.  Since the desktop is a shared
	resource, Web Notifications provides a way for these instances to easily coordinate, by
	using the <code>tag</code> attribute.
      </p>
      <p>
	Notifications which represent the same conceptual event can be tagged in the same way,
	and when both are shown, the user will only receive one notification.
      </p>

      <example>
        Instance 1                                   | Instance 2
                                                     |
        // Instance notices there is new mail.       |
        new Notification("New mail from John Doe",   |
                         { tag: 'message1' });       |
                                                     |
                                                     |  // Slightly later, this instance notices
                                                     |  // there is new mail.
                                                     |  new Notification("New mail from John Doe",
                                                     |                   { tag: 'message1' });
      </example>
      <p>
	The result of this situation, if the user agent follows the algorithms here, is a <strong>single</strong> notification "New mail from John Doe".
      </p>
    </section>
    <section>
      <title>Using the tag attribute for a single instance</title>
      <p>
	The tag attribute can also be used by a single instance of an application to keep its
	notifications as current as possible as state changes.
      </p>
      <p>
	For example, if Alice is using a chat application with Bob, and Bob sends multiple 
	messages while Alice is idle, the application may prefer that Alice not see a
	desktop notification for each message.
      </p>

      <example>
	// Bob says "Hi"
	new Notification("Bob: Hi", { tag: 'chat_Bob' });

	// Bob says "Are you free this afternoon?"
	new Notification("Bob: Hi / Are you free this afternoon?", { tag: 'chat_Bob' });
      </example>

      <p>
	The result of this situation is a <strong>single</strong> notification; the second one
	replaces the first having the same tag.  In a platform that queues notifications
	(first-in-first-out), using the tag allows the notification to also maintain its
	position in the queue.  Platforms where the newest notifications are shown first,
	a similar result could be achieved using the <code>close()</code> method.
      </p>
    </section>
  </section>

  <section>
    <title>References</title>
    <bibliography>
      <bibentry xml:id='BIDI'>
	<title>Unicode Bidirectional Algorithm</title>
	<link>http://unicode.org/reports/tr9/#The_Paragraph_Level</link>
      </bibentry>
      <bibentry xml:id='DOMEVENTS'>
	<title>Document Object Model (DOM) Level 3 Events Specification</title>
	<link>http://www.w3.org/TR/DOM-Level-3-Events</link>
      </bibentry>
      <bibentry xml:id='HTML5'>
	<title>HTML5: A vocabulary and associated APIs for HTML and XHTML</title>
	<link>http://www.w3.org/TR/html5/</link>
      </bibentry>
      <bibentry xml:id='ORIGIN'>
	<title>The Web Origin</title>
	<link>http://tools.ietf.org/html/rfc6454#section-3.2</link>
      </bibentry>
      <bibentry xml:id='PERMISSIONS'>
	<title>Feature Permissions</title>
	<link>FeaturePermissions.html</link>
      </bibentry>
    </bibliography>
  </section>

</specification>

